@using SharedLib.Extensions

@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="feed-toggle">
    <ul class="nav nav-pills outline-active">
        <li class="nav-item" @onclick="@(_ => SelectTab("feed"))">
            <a href=""
               class=@(ActiveTab == "feed" ? "nav-link active" : "nav-link")>
                Your Feed
            </a>
        </li>
        <li class="nav-item" @onclick='(() => SelectTab("all"))'>
            <a href=""
               class="@(@ActiveTab == "all" ? "nav-link active" : "nav-link" )">
                Global Feed
            </a>
        </li>
        @if (!string.IsNullOrEmpty(ActiveTagName))
        {
            <li class="nav-item">
                <a class="nav-link active">
                    <i class="ion-pound"></i> @ActiveTagName
                </a>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public string? ActiveTagName { get; set; }

    [Parameter]
    public string ActiveTab { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectedTab { get; set; }

    private bool _isLoggedIn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var _authProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        var authState = await _authProvider!.GetAuthenticationStateAsync();
        _isLoggedIn = authState.User.Identity.IsAuthenticated;
    }

    private void SelectTab(string value)
    {
        if (value == "feed" && !_isLoggedIn)
        {
            _navigationManager.NavigateTo("/login");
        }


        this.ActiveTab = value;
        OnSelectedTab.InvokeAsync(value);
    }
}
